                           __________________

                            LAB 04 QUESTIONS
                           __________________

Lab Instructions
================

  Follow the instructions below to experiment with topics related to
  this lab.
  - For sections marked QUIZ, fill in an (X) for the appropriate
    response in this file. Use the command 'make test-quiz' to see if
    all of your answers are correct.
  - For sections marked CODE, complete the code indicated. Use the
    command 'make test-code' to check if your code is complete.
  - DO NOT CHANGE any parts of this file except the QUIZ sections as it
    may interfere with the tests otherwise.
  - If your 'QUESTIONS.txt' file seems corrupted, restore it by copying
    over the 'QUESTIONS.txt.bk' backup file.
  - When you complete the exercises, check your answers with 'make test'
    and if all is well, create a zip file with 'make zip' and upload it
    to Gradescope. Ensure that the Autograder there reflects your local
    results.
  - IF YOU WORK IN A GROUP only one member needs to submit and then add
    the names of their group.


QUIZ x86-64 Assembly Basics
===========================

Where can we assume the first two arguments to a function are stored? Assume
the two arguments are 32 bits in size.
  - ( ) In registers '%eax' and '%ebx'
  - ( ) In memory and pointed to by '%rax' and '%rbx', so we'll need to use
        syntax like '(%rax)' and '(%rbx)' to retrieve them.
  - ( ) In registers '%rdi' and '%rsi'
  - (X) In registers '%edi' and '%esi'


How do we return a value from a function? Assume the value is 64 bits in length.
  - ( ) By specifying the value as an operand to the 'ret' instruction, such as
        writing 'ret %ecx' to return the value in the '%ecx' register.
  - ( ) By storing the value in a special location in memory.
  - (X) The return value is always placed in the '%rax' register by convention.
  - ( ) The return value is always placed in the '%rcx' register by convention.


What will the following assembly instructions do?
    cmpl %eax, %ebx
    jl MY_LABEL
  - ( ) Compare the values in '%eax' and '%ebx' and jump to 'MY_LABEL' if the
        value in '%eax' is less than the value in '%ebx'.
  - ( ) Compare the values at memory locations pointed to by '%eax' and '%ebx'
        and jump to 'MY_LABEL' if the value pointed to by '%eax' is less than
        the value pointed to by '%ebx'.
  - (X) Compare the values in '%eax' and '%ebx' and jump to 'MY_LABEL' if the
        value in '%ebx' is less than the value in '%eax'.
  - ( ) Compare the values at memory locations pointed to by '%eax' and '%ebx'
        and jump to 'MY_LABEL' if the value pointed to by '%ebx' is less than
        the value pointed to by '%eax'.


Which of the following registers is a callee-save register, meaning a function
must save it before using it and restore it before returning?
  - (X) '%rbx'
  - ( ) '%rax'
  - ( ) '%rcx'
  - ( ) '%r8'


CODE Complete Function Implementations in funcs.c
=================================================

  First, start by studying the code in 'main.c'. You will see that this defines
  a simple 'main()' function that calls two other functions and prints out
  their results. The two functions called by 'main()' are:
    1. 'int my_max(int i, int j)'
    2. 'int my_pow(int base, int exp)'

  The 'my_max' function determines and returns the maximum of inputs 'x' and
  'y', while the 'my_pow' function computes the expression 'base^exp', where
  'base' and 'exp' are its two arguments.

  Your task is to complete the implementation of these two functions in
  x86-64 assembly code. You should complete the code template provided
  in 'funcs.s' to accomplish this.

  Note also that we have provided C implementations of these two functions for
  you in 'funcs.c'. The recommended approach to this lab is to study the C
  versions of these two functions and then translate them to assembly.

  The 'main' program can be compiled with:
  ,----
  | > make
  `----

  A correct run of the program should produce the following output:
  ,----
  | > ./main
  | Max of 42 and 23 is: 42
  | Max of 108 and 219 is: 219
  | 4^3 = 64
  | 7^9 = 40353607
  `----


QUIZ Coding Assembly Functions
==============================

  Answer the following questions on stack manipulation and function
  calls in assembly.


Growing the Stack
~~~~~~~~~~~~~~~~~

  Which of the following instructions can be used to extend / grow the
  stack?
  - ( ) `subq $20, %rsp`
  - ( ) `pushq $99`
  - ( ) `pushl %ebx`
  - (X) All of the above


`callq` effects on Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  When calling a function via the `callq' instruction, the stack pointer `%rsp'
  must be "aligned", i.e., divisible by 16. Assuming this is so, how does the
  `callq' instruction change `%rsp'?

  - ( ) `callq' does not change `%rsp' at all. `%rsp' is
    therefore still divisible by 16 after the instruction completes.
  - (X) `callq' will subtract off 8 from the value of `%rsp' and places
    the return address at the top of the stack. `%rsp' is then divisible
    by 8 but not 16.
  - ( ) `callq' will subtract off 16 from the value of `%rsp' and places
    the return address at the top of the stack. `%rsp' is therefore
    still divisible by 16.
  - ( ) `callq' will subtract off 24 from the value of `%rsp' and places
    the return address at the top of the stack. `%rsp' is then divisible
    by 8 but not 16.


Alignment
~~~~~~~~~

  If the total size of local variables that need main memory space in a
  function is 36 bytes, one approach is to grow the stack by 36 bytes
  exactly. BUT if functions are to be called during that function, then
  it would be better to...
  - ( ) No special action is required: growing by 36 bytes is a good
    idea as it saves memory while growing larger would waste memory.
  - ( ) No special action is required: the `callq' instruction
    automatically changes `%rsp' to be a value that is divisible by 16.
  - ( ) Grow the stack by 48 bytes; this will mean `%rsp' is aligned at
    a 16-byte boundary and ready for function calls.
  - (X) Grow the stack by 40 bytes; this + 8 bytes for the return
    address in the stack will mean `%rsp' is aligned at a 16-byte
    boundary and ready for function calls.


CODE order3.s
=================

  Complete the `main()' function in `order3_asm.s'. This will require
  completing the `TODO' sections in the code to grow the stack, populate
  the stack with local variable values, call several functions with the
  addresses of local variables, and then shrink the stack.

  To help understand the intent of the assembly code, you can analyze
  the equivalent C code in `order3.c' which performs the same
  "computation" in C including use of the address-of operator.

  When written correctly, the program should compile and run as follows.
  ,----
  | > make
  | gcc -Wall -Werror -g -o order3_c order3.c
  | gcc -Wall -Werror -g -o order3_asm order3.s
  |
  | > ./order3_asm
  | r t v: 12 13 17
  | q e d:  2  5  9
  | i j k: 24 27 29
  `----

  If mistakes in the stack manipulation are present, this can lead to
  problems later in the program. Valgrind can give a little insight but
  generally these are difficult problems to diagnose, so be careful. For
  example, below is a transcript of an incorrectly written version which
  does not allocate the correct amount of space in the stack for the
  local variables.

  ,----
  | > ./order3_asm                     # run broken version
  | r t v: 12 13 17                    # output looks okay
  | q e d:  2  5  9
  | i j k: 24 27 29
  | Segmentation fault (core dumped)   # uh-oh...
  |
  | > valgrind ./order3_asm            # see if valgrind gives any help
  | ==2508984== Memcheck, a memory error detector
  | ==2508984== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  | ==2508984== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
  | ==2508984== Command: ./order3_asm
  | ==2508984==
  | r t v: 12 13 17                    # output OK...
  | q e d:  2  5  9
  | i j k: 24 27 29
  | ==2508984== Jump to the invalid address stated on the next line
  | ==2508984==    at 0x1D: ???
  | ==2508984==    by 0x1FFF000557: ???
  | ==2508984==    by 0x10489EF72: ???
  | ==2508984==    by 0x109138: ??? (in ./order3_asm)
  | ==2508984==    by 0x7FFFFFFFF: ???
  | ==2508984==  Address 0x1d is not stack'd, malloc'd or (recently) free'd
  | ==2508984==                        # ADDRESS 0x1d is really small; probably clobbered
  | ==2508984==                        # return address during execution, look at stack carefully
  | ==2508984== Process terminating with default action of signal 11 (SIGSEGV): dumping core
  | ==2508984==  Bad permissions for mapped region at address 0x1D
  | ==2508984==    at 0x1D: ???
  | ==2508984==    by 0x1FFF000557: ???
  | ==2508984==    by 0x10489EF72: ???
  | ==2508984==    by 0x109138: ??? (in ./order3_asm)
  | ==2508984==    by 0x7FFFFFFFF: ???
  | ==2508984==
  | ==2508984== HEAP SUMMARY:
  | ==2508984==     in use at exit: 0 bytes in 0 blocks
  | ==2508984==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
  | ==2508984==
  | ==2508984== All heap blocks were freed -- no leaks are possible
  | ==2508984==
  | ==2508984== For lists of detected and suppressed errors, rerun with: -s
  | ==2508984== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
  | Segmentation fault (core dumped)
  `----
