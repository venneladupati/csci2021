                           __________________

                            LAB 1 QUESTIONS
                           __________________

Lab Instructions
================

  Follow the instructions below to experiment with topics related to
  this lab.
  - For sections marked QUIZ, fill in an (X) for the appropriate
    response in this file. Use the command `make test-quiz' to see if
    all of your answers are correct.
  - For sections marked CODE, complete the code indicated. Use the
    command `make test-code' to check if your code is complete.
  - DO NOT CHANGE any parts of this file except the QUIZ sections as it
    may interfere with the tests otherwise.
  - If your `QUESTIONS.txt' file seems corrupted, restore it by copying
    over the `QUESTIONS.txt.bak' backup file.
  - When you complete the exercises, check your answers with `make test'
    and if all is well, create a zip file with `make zip' and upload it
    to Gradescope. Ensure that the Autograder there reflects your local
    results.
  - IF YOU WORK IN A GROUP only one member needs to submit and then add
    the names of their group.


Part 1: Programming Environment
===============================

  The course will require you to do some programming in a Linux
  environment and the course staff have prepared a guide to getting
  access to such an environment, available on the course Canvas page.

  Discuss with your table-mates in lab (or contemplate on your own) what
  environment you will primarily use and what will be your backup. You
  can pick a method that makes your life easiest, but since you are
  going to be writing C and Assembly code and running it, occasionally
  on remote machines, make sure to spend some time configuring an
  environment that will help you focus on course problems rather than
  tech problems.

  All students should be aware of the following options for accessing
  Linux environments.


QUIZ VOLE System
~~~~~~~~~~~~~~~~

  One easy method to access a Unix Environment is the UMN's VOLE
  system. Which of these describes VOLE best?
  - ( ) It's a web site that describes Unix commands making it easier to
    understand those systems.
  - (X) It's a web interface that gives you a Graphical Unix environment
    without needing to install anything.
  - ( ) It's a terminal command that allows easy access to the UMN's
    computing systems.
  - ( ) You know what a vole is, Morty, you know what a VOLE is? It's a,
    it's a rodent that mates for life, Morty. This is the chemical
    released in the mammal's brain, ...that makes it fall in love.


  What's a common complaint among students about VOLE?
  - ( ) It doesn't give access to the files that are stored on the CSE
    Lab systems
  - ( ) It only provides a terminal interface so you need to learn a
    terminal text editor.
  - (X) It lags and ssssssssstalls frequently because doing graphics
    over the network requires a fast internet connection
  - ( ) It is not the opposite of a Mantis.


QUIZ Secure Shell
~~~~~~~~~~~~~~~~~

  All recent major platforms (Windows / Mac / Linux) come with the `ssh
  / scp' tools pre-installed.

  What does the following command do?
  ,----
  | > ssh student2342@atlas.cselabs.umn.edu
  `----


  - ( ) Silences the user `student2342' on the machine `atlas' so that user
    can no longer type any commands and must reset their password.
  - ( ) Opens an unsecure connection to the machine `atlas' for the user
    `student2342' and allows anyone typing to the command to act as that
    user on `atlas' without password verification and without any
    encryption of the connection.
  - (X) Opens a secure connection to the machine `atlas' for the user
    `student2342' and, after verifying a password, opens a terminal/shell
    on that machine for further commands.

  What does the following command do?
  ,----
  | > scp -r hw01-code/ student2342@atlas.cselabs.umn.edu:
  `----


  - (X) It copies the directory `hw01-code' recursively to the remote
    machine `atlas' for user `student2342' allowing the contents of the
    entire folder to be moved from the local computer to a different
    computer. Password verification is required for user `student2342'.
  - ( ) It copies the directory `hw01-code' to a new folder name that
    starts with `student2342@atlas...' but uses a more efficient algorithm
    than the standard `cp' copy command.
  - ( ) It reverses the names of all files in the directory `hw01-code'
    and stores the results in a new file named `student2342@atlas...'


Terminal Basics
===============

  Explore the terminal a bit. Ask for help from a classmate or
  Staff member if you don't know how to open a terminal on your system.

  Type in the commands below and then indicate what their purpose is.


QUIZ Command Basics
~~~~~~~~~~~~~~~~~~~

  What does the following command sequence do?
  ,----
  | > cd ~                          # A
  | > mkdir csci2021                # B
  | > cd csci2021                   # C
  | > ls                            # D
  | > cd ..                         # E
  `----

 - ( ) A. Changes to your home directory/folder
       B. Creates a folder named csci2021
       C. Changes the directory csci2021 to be your home folder
       D. Lists the files in the current folder
       E. changes the directory .. to be your home folder
 - ( ) A. Creates a directory/folder named ~ (tilde)
       B. Creates a file named csci2021
       C. Creates a second folder csci2021
       D. Lists the files in the current folder
       E. Moves up one folder
 - (X) A. Changes to your home directory/folder
       B. Creates a folder named csci2021
       C. Changes into the folder csci2021
       D. Lists the files in the current folder
       E. Moves up one folder


Checking Your Quiz Answers
==========================

  To check if your quiz answers are correct, open a terminal and change
  into the `lab01-code' directory. Type the command
  ,----
  | > make test-quiz
  `----

  which will report either success or a failure and will report which questions
  were answers correctly or incorrectly.

  You will still need to complete the Part 2 quiz questions (given below) for
  this test to pass overall.


CODE in hello_c.c
=================

  Open up and examine the program in the file `hello_c.c'. This is a C
  program and to see it in action, you will need to compile and run
  it in a terminal. Navigate your terminal to the `lab0-code'
  directory. You can use the provided build tools to create the C
  program by typing
  ,----
  | > make
  `----

  This should provide output which runs the `gcc' compiler and creates
  the runnable program `hello_c': notice the lack of the `.c'
  extension. A session of compiling, running, and testing the program is
  below with commentary on the right.
  ,----
  | > make hello_c            # compile the program 'hello_c'
  | gcc -Wall -Wno-comment -Werror -g  -o hello_c hello_c.c
  |
  | > file hello_c        # check file type of program
  | hello_c: ELF 64-bit LSB shared object, x86-64, version 1
  |
  | > ./hello_c           # run compiled program
  | Goodbye Python. Goodbye Java.
  | ...
  |
  | > make test testnum=2
  | ./testius test_cases/tests.json -v -n 2
  | == Lab 1
  | == Running 1/6 tests
  | ================================================================================
  | == Test 2: Code: hello_c output
  | == Runs the program hello_c and checks its output against what's expected.
  | Running test...
  | Expected output is in file 'test_results/raw/lab_1-2-expected.tmp'
  | Actual output is in file 'test_results/raw/lab_1-2-actual.tmp'
  | Test FAILED
  | == Side-by-Side Comparison ==
  | == Differing lines have a character like '|' '>' or '>' in the middle
  | ...
  | ================================================================================
  | == Summary of Results
  | Test 2) Code: hello_c output: Failed -> Results in test_results/lab_0-2-results.tmp
  |
  | Ran 1/1 Requested Tests
  | Passed 0/1 Tests
  | Total Score: 0/0.5
  `----

  As indicated in the comments in `hello_c.c', there are a number of
  typos, missing, and extraneous lines printed by the program. To make
  the code pass the tests, you will simply need to correct `hello_c.c'
  to match the output expected for the test. As the Comments for the
  CODE test indicate, failures report differences between the expected
  and actual output with symbols between the side-by-side
  comparison. These symbols are those used by the comparison program
  `diff' and are as follows:
  ,----
  | > means there is an extra ACTUAL line that doesn't match anything in EXPECT
  | < means there is a line missing in ACTUAL that is present in EXPECT
  | | means the lines match closely but some characters differ
  `----

  Edit code in `hello_c.c' so that the output matches and testing the
  code produces a success:
  ,----
  | > make test testnum=2
  | ./testius test_cases/tests.json -v -n 2
  | == Lab 1
  | == Running 1/2 tests
  | ================================================================================
  | == Test 2: Code: hello_c output
  | == Runs the program hello_c and checks its output against what's expected.
  | Running test...
  | Expected output is in file 'test_results/raw/lab_1-2-expected.tmp'
  | Actual output is in file 'test_results/raw/lab_1-2-actual.tmp'
  | Test PASSED
  | ================================================================================
  | == Summary of Results
  | Test 2) Code: hello_c output: Passed
  |
  | Ran 1/1 Requested Tests
  | Passed 1/1 Tests
  | Total Score: 0.5/0.5
  `----


Part 2: Linked List Application
===============================

QUIZ Build Commands
~~~~~~~~~~~~~~~~~~~

  TAs will demonstrate how to compile the `list_main' application using a
  provided `Makefile' and the command `make'. They will demonstrate how to run
  several other useful commands via `make'. These are as follows:

  To remove all the compiled files (executable programs and `.o' files),
  use `make' as follows:
  - ( ) make sanitize
  - (X) make clean
  - ( ) make remove
  - ( ) make gc

  To run ALL the automated tests for the code through the given
  `Makefile' use the following command:
  - (X) make test
  - ( ) make verify
  - ( ) make examine
  - ( ) make unit

  Note: the default is to run all tests and you may need to specify WHAT
  to test, like a quiz, code, or an individual problem.

  To run only test #2 for and show the results, use the following `make'
  command:
  - ( ) make test2
  - ( ) make test-code 2
  - ( ) make unit test=2
  - (X) make test testnum=2

  If I change code and want to see if any more tests pass after the
  change, I should type
  - ( ) `make' to rebuild followed by `make test' to run tests
  - ( ) `make clean' followed by `make' followed by `make test'
  - ( ) `make test' will rebuild based on changes AND then run tests
  - (X) ALL of these will work but `make test' is the shortest and sweetest.

  Since compiling C programs involving several files is a bit painful,
  we will provide a `Makefile` on all of the course projects and the
  conventions outlined here will be followed to make life easier.
  Importantly, **passing automated tests will be part of project
  grades** so make sure you know how to run the tests.


CODE for Linked List Application
================================

  This lab's code pack contains an application featuring a linked list. The
  code is divided into an interactive `main()' function in `list_main.c' and a
  number of supporting files. You are encouraged to *study this program
  carefully* because
  - It demonstrates MANY common and useful techniques in C
  - You will need to use these techniques in an upcoming project

  The `list_main' program has several problems that must be corrected to
  complete it.

  1. The built in `get' command produces some errors. This will require
     editing the associated C function in `list_funcs.c' to correct it.
  2. The `contains' command is not implemented, which will require adding
     a function to `list_funcs.c' and adding that command to
     `list_main.c'.
  3. The `list_insert()' function has a problem with its return value
     which causes `main()' to report incorrect results for it.

  The objective is to fix the code so all the related tests pass:
  ,----
  | > make test testnum=3-6
  | == list_main
  | == Running 4/6 tests
  | Test 3) list_main: Print then Exit: Passed
  | Test 4) list_main: Insert 3 and Print: Passed
  | Test 5) Get Command: Passed
  | Test 6) Contains Items: Passed
  |
  | Ran 4/4 Requested Tests
  | Passed 4/4 Tests
  | Total Score: 0.5/0.5
  `----

  With the starter code, you should be able to compile and run the tests. Most
  will fail but runnable tests are the first step to victory.
  ,----
  | > make
  | gcc -Wall -Werror -g  -c list_main.c
  | gcc -Wall -Werror -g  -c list_funcs.c
  | gcc -Wall -Werror -g  -o list_main list_main.o list_funcs.o list.h
  |
  | > make test-code
  | ./testius test_cases/code_tests.json
  | == list_main
  | == Running 4/6 tests
  | Test 3) list_main: Print then Exit: Passed
  | Test 4) list_main: Insert 3 and Print: Failed -> Results in test_results/list_main-2-results.tmp
  | Test 5) Get Command: Segmentation Fault -> Results in test_results/list_main-3-results.tmp
  | Test 6) Contains Items: Failed -> Results in test_results/list_main-4-results.tmp
  |
  | Ran 4/4 Requested Tests
  | Passed 1/4 Tests
  | Total Score: 0.125/0.5
  `----


Submitting a Zip for Gradescope
===============================

  Once you have your QUIZ answers for the `QUESTIONS.txt' file correct
  and your CODE completed, do one final check via `make test'.

  If everything looks ok, you are ready to submit. Do so by creating a
  zip file via `make zip'
  ,----
  | > make zip
  | rm -f hello_c.c
  | rm -rf test_results
  | rm -f lab01-code.zip
  | cd .. && zip "code/lab01-code.zip" -r "code"
  |   adding: code/ (stored 0%)
  |   adding: code/QUESTIONS.txt (deflated 67%)
  |   adding: code/Makefile (deflated 56%)
  |   adding: code/test_cases/ (stored 0%)
  |   adding: code/test_cases/output/ (stored 0%)
  |   adding: code/test_cases/output/quiz.txt (stored 0%)
  |   adding: code/test_cases/output/code.txt (deflated 42%)
  |   adding: code/test_cases/resources/ (stored 0%)
  |   adding: code/test_cases/resources/QUESTIONS.sha256 (deflated 12%)
  |   adding: code/test_cases/resources/test_quiz_filter (deflated 33%)
  |   adding: code/test_cases/tests.json (deflated 59%)
  |   adding: code/testius (deflated 73%)
  |   adding: code/hello_c (deflated 76%)
  |   adding: code/QUESTIONS.txt.bk (deflated 65%)
  | Zip created in lab01-code.zip
  `----

  The zip file named `lab01-code.zip' should be uploaded to Gradescope
  under the `Lab 1' assignment. Once uploaded, the same `make test'
  check will be run and you should verify its success.

  IF YOU ARE WORKING IN A GROUP: only one student needs to upload the
  Zip file and can add up to 2 other students (groups of 3) to the
  submission who will also receive credit for the lab work.
